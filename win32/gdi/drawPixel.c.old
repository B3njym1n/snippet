#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <stdint.h>

const char g_szClassName[] = "myWindowsClass";
const int width = 640;
const int height = 480;

int ClientWidth;
int ClientHeight;
void *Memory;

typedef uint32_t u32;

typedef struct {
    int x;
    int y;
} point;

BITMAPINFO BMINFO(int CWidth, int CHeight);

void DrawLine() {

}

void DrawPixel(int X, int Y, u32 Color) {
    u32 *Pixel = (u32 *)Memory;
    Pixel += Y * ClientWidth + X;
    *Pixel = Color;
}

void ClearScreen(u32 Color);
LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
	LPSTR lpCmdLine, int nCmdShow)
{
	WNDCLASSEX wc;
	HWND hwnd;
	MSG Msg;

	wc.cbSize		 = sizeof(WNDCLASSEX);
	wc.style		 = 0;
	wc.lpfnWndProc	 = WndProc;
	wc.cbClsExtra	 = 0;
	wc.cbWndExtra	 = 0;
	wc.hInstance	 = hInstance;
	wc.hIcon		 = LoadIcon(NULL, IDI_APPLICATION);
	wc.hCursor		 = LoadCursor(NULL, IDC_ARROW);
	wc.hbrBackground = (HBRUSH)(COLOR_WINDOW+1);
	wc.lpszMenuName  = NULL;
	wc.lpszClassName = g_szClassName;
	wc.hIconSm		 = LoadIcon(NULL, IDI_APPLICATION);

	if(!RegisterClassEx(&wc))
	{
		MessageBox(NULL, "Window Registration Failed!", "Error!",
			MB_ICONEXCLAMATION | MB_OK);
		return 0;
	}

	hwnd = CreateWindowEx(
		WS_EX_APPWINDOW,
		g_szClassName,
		"An Animation Program",
		WS_MINIMIZEBOX | WS_SYSMENU | WS_POPUP | WS_CAPTION,
		CW_USEDEFAULT, CW_USEDEFAULT, width, height,
		NULL, NULL, hInstance, NULL);

	if(hwnd == NULL)
	{
		MessageBox(NULL, "Window Creation Failed!", "Error!",
			MB_ICONEXCLAMATION | MB_OK);
		return 0;
	}

	ShowWindow(hwnd, nCmdShow);
	UpdateWindow(hwnd);

	while(GetMessage(&Msg, NULL, 0, 0) > 0)
	{
		TranslateMessage(&Msg);
		DispatchMessage(&Msg);
	}
	return Msg.wParam;
}

LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
   
    PAINTSTRUCT  ps ;
    HDC          hdc ;

    switch(msg)
    {
        case WM_CREATE:
        {
            RECT Rect;
            GetClientRect(hwnd, &Rect);
            ClientHeight = Rect.bottom - Rect.top;
            ClientWidth = Rect.right - Rect.left;

            BITMAPINFO bmi;
            bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
            bmi.bmiHeader.biWidth = ClientWidth;
            bmi.bmiHeader.biHeight = -ClientHeight; // order pixels from top to bottom
            bmi.bmiHeader.biPlanes = 1;

            bmi.bmiHeader.biBitCount = 32;
            bmi.bmiHeader.biCompression = BI_RGB;
            bmi.bmiHeader.biSizeImage = 0;
            bmi.bmiHeader.biXPelsPerMeter = 0;
            bmi.bmiHeader.biYPelsPerMeter = 0;
            bmi.bmiHeader.biClrUsed = 0;
            bmi.bmiHeader.biClrImportant = 0;
            bmi.bmiColors[0].rgbBlue = 0;
            bmi.bmiColors[0].rgbGreen = 0;
            bmi.bmiColors[0].rgbRed = 0;
            bmi.bmiColors[0].rgbReserved = 0;

            Memory = VirtualAlloc(0, ClientHeight* ClientWidth*4,MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);
            /* hdc = GetDC(hwnd);
            ClearScreen(0x333333);
            for (int i = 50; i < 200; ++i) {
                DrawPixel(i, 100, 0xffffff);
            }
            StretchDIBits(hdc, 0, 0, ClientWidth, ClientHeight, 0, 0, ClientWidth, ClientHeight, Memory, &bmi,DIB_RGB_COLORS, SRCCOPY); */
        }
        break;
        case WM_SIZE:
        break;
        case WM_PAINT:
        {
            /* hdc = BeginPaint(hwnd, &ps);
            MoveToEx(hdc, 0, 0, NULL);
            LineTo(hdc, ClientWidth, ClientHeight);
            EndPaint(hwnd, &ps); */
            hdc = BeginPaint(hwnd, &ps);

            BITMAPINFO bmi = BMINFO(ClientWidth, ClientHeight);
            ClearScreen(0x333333);
            for (int i = 50; i < 200; ++i) {
                DrawPixel(i, 100, 0xffffff);
            }
            StretchDIBits(hdc, 0, 0, ClientWidth, ClientHeight, 0, 0, ClientWidth, ClientHeight, Memory, &bmi,DIB_RGB_COLORS, SRCCOPY);
            EndPaint(hwnd, &ps);
        }
        break;
        case WM_CLOSE:
            DestroyWindow(hwnd);
        break;
        case WM_DESTROY:
            VirtualFree(Memory, ClientHeight* ClientWidth*4, MEM_RELEASE);
            PostQuitMessage(0);
        break;
        default:
            return DefWindowProc(hwnd, msg, wParam, lParam);
    }
    return 0;
}

void ClearScreen(u32 Color) {
    u32 *Pixel = (u32 *) Memory;
    for (int i = 0; i < ClientWidth * ClientHeight; ++i) {
        *Pixel++ = Color;
    }
}

BITMAPINFO BMINFO(int CWidth, int CHeight)
{
    BITMAPINFO bmi;
    bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
    bmi.bmiHeader.biWidth = CWidth;
    bmi.bmiHeader.biHeight = -CHeight; // order pixels from top to bottom
    bmi.bmiHeader.biPlanes = 1;

    bmi.bmiHeader.biBitCount = 32;
    bmi.bmiHeader.biCompression = BI_RGB;
    bmi.bmiHeader.biSizeImage = 0;
    bmi.bmiHeader.biXPelsPerMeter = 0;
    bmi.bmiHeader.biYPelsPerMeter = 0;
    bmi.bmiHeader.biClrUsed = 0;
    bmi.bmiHeader.biClrImportant = 0;
    bmi.bmiColors[0].rgbBlue = 0;
    bmi.bmiColors[0].rgbGreen = 0;
    bmi.bmiColors[0].rgbRed = 0;
    bmi.bmiColors[0].rgbReserved = 0;
    return bmi;
}